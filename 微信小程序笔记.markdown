# flex布局
1. 微信小程序对flex布局支持度很好
2. 使用flex-direction定义row行/column列(默认)实现排列方向,还有row-reverse/column-reverse倒序
3. 容器宽度100% 高度自适应 
4. 使用justify-content(主轴上对齐):flex-start(默认)/flex-end/center居中显示/sapce-between平均分布占据一整列或一整行/space-around等距分布,控制flex-item排列方向,并且受flex-direction影响
5. 使用align-items(交叉轴上对齐):flex-start(默认)/flex-end/center居中显示/sapce-between/baseline(元素文字的基线对齐)/stretch
6. 使用flex-wrap:nowrap(默认)不换行/wrap换行/来实现消除间距换行,多余元素把剩余空间等距分布
7. flex-wrap消除间距的办法:设置好宽高/用虚拟容器替代
8. 容器设置成flex,元素会取消块状特性,但容器的块特性不会消除

# 组件Components
1. 复用性高的代码可以写成一个组件,然后在page里面使用component
```
<!-- page页面的引用 json文件 -->

{
	"usingComponents":{
		"组件的名字(自行规定命名规范)":"路径地址"
	}
}

<!-- page页面 的使用 wxml-->
	<组件的名字>
```

2. 配置项目的相对路径和绝对路径
3. 小程序尺寸单位和设计原则:设计图一般以iphone6为基准设计(长750rpx高1300rpx),则px的比例为2倍rpx. 
4. rpx尺寸单位特性可以实现自适应(根据屏幕大小变化而变化),px相对于各种屏幕保持显示大小不变:例如字体可以设置为px而不随屏幕大小变化.
5. 小程序可以通过设置page属性进行样式处理,从而实现全局的样式控制(page是小程序默认包裹的全局容器)
6. 组件可以继承的样式:font/color
7. 组件最好不要留有空白间距(无意义的空白/间距)
8. 让组件自适应宽display:inline-flex	
9. bind事件绑定不会阻止冒泡事件向上冒泡,catch事件绑定会阻止冒泡事件向上冒泡

# 数据来源的三种方式
1. wxml
2. js > wxml
3. 服务器 > js >wxml

# 组件使用
1. 组件的初始数据写在Component内的data属性中,在wxml使用时为:{{表达式/变量名}}
2. 组件的开放数据或者属性可以在Component内的properties属性中定义供外部使用
3. 组件具有开放性和封装性
```
properties:{
	like:{
		type:Boolean,  //type为必填值
		value:默认初始值	 //非必填值
		observer:function(){}	//非必填值
}
使用this.setData({})进行数据绑定变更
<!--使用  -->
this.properties.like
```

# 微信小程序页面生命周期
1. onLoad----------------监听页面加载
2. onReady---------------监听页面初次渲染完成
3. onShow----------------监听页面出现在前台时执行
4. onHide----------------监听页面前台变为后台时执行
5. onUnload--------------监听页面销毁时执行
6. onPullDownRefresh-----触发下拉刷新时执行
7. onReachBottom---------页面触底时执行
8. onShareAppMessage-----页面被用户分享时执行
9. onPageScroll----------页面滚动时执行
10. onPageScroll---------页面滚动时执行
11. onResize-------------页面尺寸变化时执行
12. onTabItemTap---------tab 点击时执行
13. viewTap--------------事件响应函数

# 微信小程序组件的生命周期(lifetimes)
1. created      在组件实例刚刚被创建时执行	
2. attached		在组件实例进入页面节点树时执行	
3. ready		在组件在视图层布局完成后执行	
4. moved		在组件实例被移动到节点树另一个位置时执行	
5. detached		在组件实例被从页面节点树移除时执行
6. error		每当组件方法抛出错误时执行	
```
Component({
  lifetimes: {
    attached: function() {
      // 在组件实例进入页面节点树时执行
    },
    detached: function() {
      // 在组件实例被从页面节点树移除时执行
    },
  },
  // 以下是旧式的定义方式，可以保持对 <2.2.3 版本基础库的兼容
  attached: function() {
    // 在组件实例进入页面节点树时执行
  },
  detached: function() {
    // 在组件实例被从页面节点树移除时执行
  },
  // ...
})

```

# 小程序this指代
1. this在回调函数内指代不明确,在回调函数外指代小程序对象
2. 在es5一般用let that=this定义然后在回调函数内使用that
3. 在es6一般可以使用箭头函数实现this指向

# 小程序wx.request
1. 请求回调,返回的结果码为多少都是回调成功的结果,在success里处理,在fail的回调里一般处理的是调用接口错误
2. 通用错误异常处理可以集中处理,并且可以设置不同错误码和提示文字来进行提示

