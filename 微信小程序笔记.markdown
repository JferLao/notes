# flex布局
1. 微信小程序对flex布局支持度很好
2. 使用flex-direction定义row行/column列(默认)实现排列方向,还有row-reverse/column-reverse倒序
3. 容器宽度100% 高度自适应 
4. 使用justify-content(主轴上对齐):flex-start(默认)/flex-end/center居中显示/sapce-between平均分布占据一整列或一整行/space-around等距分布,控制flex-item排列方向,并且受flex-direction影响
5. 使用align-items(交叉轴上对齐):flex-start(默认)/flex-end/center居中显示/sapce-between/baseline(元素文字的基线对齐)/stretch
6. 使用flex-wrap:nowrap(默认)不换行/wrap换行/来实现消除间距换行,多余元素把剩余空间等距分布
7. flex-wrap消除间距的办法:设置好宽高/用虚拟容器替代
8. 容器设置成flex,元素会取消块状特性,但容器的块特性不会消除

# 组件Components
1. 复用性高的代码可以写成一个组件,然后在page里面使用component
```
<!-- page页面的引用 json文件 -->

{
	"usingComponents":{
		"组件的名字(自行规定命名规范)":"路径地址"
	}
}

<!-- page页面 的使用 wxml-->
	<组件的名字>
```

2. 配置项目的相对路径和绝对路径
3. 小程序尺寸单位和设计原则:设计图一般以iphone6为基准设计(长750rpx高1300rpx),则px的比例为2倍rpx. 
4. rpx尺寸单位特性可以实现自适应(根据屏幕大小变化而变化),px相对于各种屏幕保持显示大小不变:例如字体可以设置为px而不随屏幕大小变化.
5. 小程序可以通过设置page属性进行样式处理,从而实现全局的样式控制(page是小程序默认包裹的全局容器)
6. 组件可以继承的样式:font/color
7. 组件最好不要留有空白间距(无意义的空白/间距)
8. 让组件自适应宽display:inline-flex	
9. bind事件绑定不会阻止冒泡事件向上冒泡,catch事件绑定会阻止冒泡事件向上冒泡
10. 组件属性赋值和页面渲染流程:API>page JS>通过setData设置page中的WXML对应组件属性或者直接显示>数据流向组件的Property然后对组件数据进行渲染>通过setData设置wxml数据>实现渲染

# 数据来源的三种方式
1. wxml
2. js > wxml
3. 服务器 > js >wxml

# 组件使用
1. 组件的初始数据写在Component内的data属性中,在wxml使用时为:{{表达式/变量名}}
2. 组件的开放数据或者属性可以在Component内的properties属性中定义供外部使用
3. 组件具有开放性和封装性
```
properties:{
	like:{
		type:Boolean,  //type为必填值
		value:默认初始值	 //非必填值
		observer:function(){}	//非必填值
}
使用this.setData({})进行数据绑定变更
<!--使用  -->
this.properties.like
```
4. 组件的数据更新一定要使用this.setData()  不可以直接this.data.数据进行赋值

# 微信小程序页面生命周期
1. onLoad----------------监听页面加载
2. onReady---------------监听页面初次渲染完成
3. onShow----------------监听页面出现在前台时执行
4. onHide----------------监听页面前台变为后台时执行
5. onUnload--------------监听页面销毁时执行
6. onPullDownRefresh-----触发下拉刷新时执行
7. onReachBottom---------页面触底时执行
8. onShareAppMessage-----页面被用户分享时执行
9. onPageScroll----------页面滚动时执行
10. onPageScroll---------页面滚动时执行
11. onResize-------------页面尺寸变化时执行
12. onTabItemTap---------tab 点击时执行
13. viewTap--------------事件响应函数

# 微信小程序组件的生命周期(lifetimes)
1. created      在组件实例刚刚被创建时执行	在里面不可以使用setData
2. attached		在组件实例进入页面节点树时执行	
3. ready		在组件在视图层布局完成后执行	
4. moved		在组件实例被移动到节点树另一个位置时执行	
5. detached		在组件实例被从页面节点树移除时执行
6. error		每当组件方法抛出错误时执行	
```
Component({
  lifetimes: {
    attached: function() {
      // 在组件实例进入页面节点树时执行
    },
    detached: function() {
      // 在组件实例被从页面节点树移除时执行
    },
  },
  // 以下是旧式的定义方式，可以保持对 <2.2.3 版本基础库的兼容
  attached: function() {
    // 在组件实例进入页面节点树时执行
  },
  detached: function() {
    // 在组件实例被从页面节点树移除时执行
  },
  // ...
})

```

# 小程序this指代
1. this在回调函数内指代不明确,在回调函数外指代小程序对象
2. 在es5一般用let that=this定义然后在回调函数内使用that
3. 在es6一般可以使用箭头函数实现this指向


# 小程序wx.request
1. 请求回调,返回的结果码为多少都是回调成功的结果,在success里处理,在fail的回调里一般处理的是调用接口错误
2. 通用错误异常处理可以集中处理,并且可以设置不同错误码和提示文字来进行提示
3. 可以将wx.request进行封装,把错误处理集中解决,使用时即不需定义

# 使用Model层进行数据处理
1. 可以将请求的方法放在model层进行处理
2. Model层的数据可以通过回调返回到页面调用上
```
<!-- Model -->
class Person extends HTTP{
	getList(Callback){
		this.request({
			url:'',
			success:(res)=>{
				callback(res)
			}
		})
	}
}
<!-- page -->
const data=new Person()	//实例化person类
data.getList((res=>{	//把回调函数作为参数传到getList里面
	this.setData({data:res})
}))
```


# 小程序激活事件
1. 通过this.triggerEvent('自定义事件名称,'{自定义属性,触发event.detail属性},{触发事件的选项})
2. 页面可以通过bind:事件名进行监听
3. 页面js对事件进行处理
```
<!-- 组件like.js -->
this.triggerEvent('like',{behavior:'like'})

<!-- 页面 -->
<img bind:like="Onlike"/>

onLike:function(event){
	let like=event.detail.behavior
}
```

# 小程序observer函数
1. properties里的数据可以设置参数observer:function(newVal,oldVal,changePath)
2. 把数据更新的检测放置在observer里处理
3. 避免在properties的数据中对数据本身进行递归赋值更新,防止内存泄漏

# 小程序behavior
1. 小程序实现代码复用通过Behavior类
```
let Beh=Behavior({
	propeties:{},
	...
})
export {Beh}

<!-- Components 中-->
Component({
	behaviors:[Beh]
})

```

# 用缓存提高性能
1. 使用接口之前先判断缓存中是否有保存对应数据
2. 如果有缓存则直接使用缓存,不使用调用接口的方法
3. 没有缓存的话调用接口(API)获取数据,再将数据在一定规则下写到缓存中

# wx:if和hidden
1. wx:if有更高的切换消耗而hidden有更高的初始渲染消耗
2. 需要频繁切换的情境下,用hidden更好
3. 如果运行时条件不大可能改变使用wx:if更好


# JavaScript的Promise
1. 代码风格比回调容易理解,避免出现回调地狱
2. 多个异步等待合并
3. Promise是一个对象(并不是一个函数),可以保存状态(函数在面向对象编程中是不可以保存状态的)
```
const promise =new Promise((resolve,reject)=>{
	<!-- 异步代码写在promise中的箭头函数中 -->
	wx.getSystemInfo({
		sussess:(res)=>resolve(res)},
		fail:(error)=>reject(error)
	})
})
<!-- 执行回调函数 -->
promise.then(
(res)=>{
	console.log(res)
},
(error)=>{
	console.log(error)
})
```
4. promise有三种状态:pending(进行中),fulfilled(已成功),rejected(已失败),pending只能单向转变为fulfilled或者rejected
5. promise解决回调地狱的方法:在promise内部return promise结果然后在外部结果再使用then()

# wx:key使用
1. 为wx:for列表的每个值指定一个唯一标识
2. wx:key的标识需要为不重复打的数字或者字符串
3. 正确写法:如果wx:for的数据为Object则wx:key="id"即可以直接使用item.id
4. 正确写法2:如果wx:for的数据为数字或者字符串则可以直接使用wx:key="*this"


# 小程序的页面跳转使用技巧
1. 使用wx.navigateTo()既可以完成详情页跳转
2. 详情的页面跳转可以写在组件的内部,在组件内部最外层监听点击事件,当触发点击事件直接触发跳转详情页
3. 在组件的页面跳转缺陷:降低了组件的实用性,局限了使用场景
4. 解决方法:组件监听点击事件,利用triggerEvent("id号")包含传递的具体参数来触发事件,再在详情页监听事件再触发跳转.这种方法扩大了使用场景,但是加大了编程难度

# 页面之间的数据传输
1. 通过生命周期函数方法的options参数既可以获取


# 小程序的三种变异方法
1. 普通编译:每次保存都从入口页面加载
2. 添加编译模式:可以自定义编译来指定启动页面和启动参数
3. 通过二维码编译

# 小程序slot插槽
```
<slot name="slotName"></slot>
```
1. 组件内部可以通过外部传递标签进入<slot>外部标签进入到这里来</slot>
2. 不传递slot则不会显示
3. 外部传递只需要在标签添加属性slot="slotName"即可使用外部插入
4. 需要在js文件中的options中设置multipleSlots:true才可以启用插槽
